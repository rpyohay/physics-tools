#include <cmath>
#include "DataFormats/Math/interface/deltaR.h"
#include "FWCore/MessageLogger/interface/MessageLogger.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "FWCore/Framework/interface/MakerMacros.h"
#include <string>

template<class object >
TriggerCandProducer<object>::TriggerCandProducer(const edm::ParameterSet& iConfig )
{

  _inputProducer = iConfig.template getParameter<edm::InputTag>("InputProducer");
  
  // **************** Trigger ******************* //
  const edm::InputTag dTriggerEventTag("hltTriggerSummaryAOD","","HLT");
  triggerEventTag_ = 
    iConfig.getUntrackedParameter<edm::InputTag>("triggerEventTag",
						 dTriggerEventTag);
  const edm::InputTag dTriggerResults("TriggerResults","","HLT");


  // By default, trigger results are labeled "TriggerResults" with process name "HLT" in the event.
  triggerResultsTag_ = iConfig.getUntrackedParameter<edm::InputTag>("triggerResultsTag", 
								    dTriggerResults);
  hltTags_ = iConfig.getParameter<std::vector<edm::InputTag> >("hltTags");
  
  // Trigger-matching window. We use some default deltaR.
  delRMatchingCut_ = iConfig.getUntrackedParameter<double>("triggerDelRMatch", 0.30);



  // ******************************************** //
  //Whether using HLT trigger path name or the actual trigger filter name. Trigger path is default.
  isFilter_ = iConfig.getUntrackedParameter<bool>("isTriggerFilter",false);
  HLTSubFilters_ = 
    iConfig.getUntrackedParameter<std::vector<edm::InputTag> >("HLTSubFilters", 
							       std::vector<edm::InputTag>());


  // By default, do not print debugging information for each event.
  printIndex_ = iConfig.getUntrackedParameter<bool>("verbose",false);

  // By default, perform trigger-matching with only unprescaled trigger.
  matchUnprescaledTriggerOnly_ = iConfig.getUntrackedParameter<bool>("matchUnprescaledTriggerOnly",true);

  /* if there are 2 triggers supplied that are both unprescaled and in the menu, choose the one 
    with lower leading ET*/
  arbitrateByLowerLeadingET_ = 
    iConfig.getUntrackedParameter<bool>("arbitrateByLowerLeadingET", true);


  //  produces< edm::PtrVector<object> >();
  produces< edm::RefToBaseVector<object> >();
}


template<class object>
TriggerCandProducer<object>::~TriggerCandProducer()
{

}


//
// member functions
//


// ------------ method called to produce the data  ------------
template<class object >
void TriggerCandProducer<object>::produce(edm::Event &event, const edm::EventSetup &eventSetup)
{

  using namespace std;
  using namespace edm;
  using namespace reco;
  using namespace trigger;

   // Create the output collection
  std::auto_ptr< edm::RefToBaseVector<object> > 
    outColRef( new edm::RefToBaseVector<object> );
  //std::auto_ptr< edm::PtrVector<object> > 
  // outColPtr( new edm::PtrVector<object> );

  //skip event if HLT paths do not have identical process names
  if (skipEvent_) {
    event.put(outColRef);
    //event.put(outColPtr);
    return;    
  }


  // if user is using prescaled path, print out some loud warning message.
  if( !matchUnprescaledTriggerOnly_ )
    edm::LogInfo("info")<< "******** Warning: You are using a prescaled trigger for matching: Are you sure you want to do this ??? ";


   // Get the input collection
   edm::Handle<edm::View<object> > candHandle;
   try
   {
      event.getByLabel(_inputProducer, candHandle);
   }
   catch(cms::Exception &ex)
   {
      edm::LogError("TriggerCandProducer") << "Error! Can't get collection: " << 
	_inputProducer;
      throw ex;
   }

   // Trigger Info
   edm::Handle<trigger::TriggerEvent> trgEvent;
   event.getByLabel(triggerEventTag_,trgEvent);
   edm::Handle<edm::TriggerResults> pTrgResults;
   event.getByLabel(triggerResultsTag_, pTrgResults);

   //gracefully choose the single appropriate HLT path from the list of desired paths
   std::vector<std::string> activeHLTPathsInThisEvent = hltConfig_.triggerNames();
   std::map<std::string, bool> triggerInMenu;
   std::map<std::string, bool> triggerUnprescaled;
   theRightHLTTag_ = edm::InputTag();
   for (std::vector<edm::InputTag>::const_iterator iMyHLT = hltTags_.begin(); 
        iMyHLT != hltTags_.end(); ++iMyHLT) {
     if ( triggerInMenu.find((*iMyHLT).label()) == triggerInMenu.end() ) 
       triggerInMenu[(*iMyHLT).label()] = false;
     if ( triggerUnprescaled.find((*iMyHLT).label()) == triggerUnprescaled.end() ) 
       triggerUnprescaled[(*iMyHLT).label()] = false;
   }
   for (std::vector<std::string>::const_iterator iHLT = activeHLTPathsInThisEvent.begin(); 
        iHLT != activeHLTPathsInThisEvent.end(); ++iHLT) {
      //cout << "######## " << *iHLT << endl;
     for (std::vector<edm::InputTag>::const_iterator iMyHLT = hltTags_.begin(); 
          iMyHLT != hltTags_.end(); ++iMyHLT) {
       if ((*iMyHLT).label() == *iHLT) {
         triggerInMenu[(*iMyHLT).label()] = true;
         /*std::cout << "(*iMyHLT).label() = " << (*iMyHLT).label() << std::endl;
         std::cout << "hltConfig_.prescaleValue(event, eventSetup, *iHLT) = ";
         std::cout << hltConfig_.prescaleValue(event, eventSetup, *iHLT) << std::endl;*/
         if (hltConfig_.prescaleValue(event, eventSetup, *iHLT) == 1) 
           triggerUnprescaled[(*iMyHLT).label()] = true;         
       }
     }
   }
   unsigned int numOKHLTPaths = 0;
   bool error = false;
   for (std::map<std::string, bool>::const_iterator iMyHLT = triggerInMenu.begin(); 
        iMyHLT != triggerInMenu.end(); ++iMyHLT) {
     if (iMyHLT->second && triggerUnprescaled[iMyHLT->first]) {
       if (arbitrateByLowerLeadingET_ && !(theRightHLTTag_ == edm::InputTag())) {
	 size_t beginPos1 = iMyHLT->first.find("Photon");
	 size_t endPos1 = iMyHLT->first.find('_', beginPos1);
	 if ((beginPos1 != std::string::npos) && (endPos1 != std::string::npos)) {
	   std::string leadingET = iMyHLT->first.substr(beginPos1 + 6, endPos1 - beginPos1 - 6);
	   std::string::const_iterator iChar = leadingET.begin();
	   while ((iChar != leadingET.end()) && !error) {
	     if (isalpha(*iChar) != 0) error = true;
	     ++iChar;
	   }
	 }
	 else error = true;
	 size_t beginPos2 = theRightHLTTag_.label().find("Photon");
	 size_t endPos2 = theRightHLTTag_.label().find('_', beginPos2);
	 if ((beginPos2 != std::string::npos) && (endPos2 != std::string::npos)) {
	   std::string leadingET = theRightHLTTag_.label().substr(beginPos2 + 6, 
								  endPos2 - beginPos2 - 6);
	   std::string::const_iterator iChar = leadingET.begin();
	   while ((iChar != leadingET.end()) && !error) {
	     if (isalpha(*iChar) != 0) error = true;
	     ++iChar;
	   }
	 }
	 else error = true;
	 if (!error) {
	   float currentLeadingET = 
	     atof(theRightHLTTag_.label().substr(beginPos2 + 6, endPos2 - beginPos2 - 6).c_str());
	   float newLeadingET = 
	     atof(iMyHLT->first.substr(beginPos1 + 6, endPos1 - beginPos1 - 6).c_str());
	   if (newLeadingET < currentLeadingET) {
	     theRightHLTTag_ = edm::InputTag(iMyHLT->first, "", hltTags_[0].process());
	   }
	 }
       }
       else theRightHLTTag_ = edm::InputTag(iMyHLT->first, "", hltTags_[0].process());
       ++numOKHLTPaths;
     }
   }

   // in case user wants to perform matching with prescaled trigger, then choose prescale trigger 
   if(numOKHLTPaths == 0 && !(matchUnprescaledTriggerOnly_) ) {
     for (std::map<std::string, bool>::const_iterator iMyHLT = triggerInMenu.begin(); 
	  iMyHLT != triggerInMenu.end(); ++iMyHLT) {
       if(iMyHLT->second) {
	 theRightHLTTag_ = edm::InputTag(iMyHLT->first, "", hltTags_[0].process());
	 ++numOKHLTPaths;
       }
     }     
   }


   // some sanity checks
   if (numOKHLTPaths == 0) {
     stringstream err;
     err << "Error: No unprescaled HLT paths in ";
     err << "run " << event.run() << ", event " << event.id().event() << ", lumi section ";
     err << event.getLuminosityBlock().luminosityBlock() << std::endl;
     err << "Menu name: " << hltConfig_.tableName() << endl;
     edm::LogError("TriggerCandProducer") << err.str();
     throw cms::Exception("GarbageInGarbageOut") << err.str();
   }
   if ((numOKHLTPaths > 1) && error) {
     stringstream err;
     err << "****** Error: There are multiple trigger paths. I cannot figure out how to perform trigger matching :(" << 
       "   Multiple HLT paths in ";
     err << "run " << event.run() << ", event " << event.id().event() << ", lumi section ";
     err << event.getLuminosityBlock().luminosityBlock() << std::endl;
     err << "Menu name: " << hltConfig_.tableName() << endl;
     edm::LogError("TriggerCandProducer") << err.str();
     throw cms::Exception("GarbageInGarbageOut") << err.str();
   }
   //else std::cout << "theRightHLTTag_ = " << theRightHLTTag_ << std::endl;

   // Some sanity checks
   if (not trgEvent.isValid()) {
     edm::LogInfo("info")<< "******** Following Trigger Summary Object Not Found: " << 
       triggerEventTag_;

     event.put(outColRef);
     // event.put(outColPtr);
     return;
   }

   //---------------------------------------------------------------------------

   edm::InputTag filterTag;
   // loop over these objects to see whether they match
   const trigger::TriggerObjectCollection& TOC( trgEvent->getObjects() );
     
   
   int index=9999;

   if(isFilter_){
   //-----------------------------------------------------------------------

   //choose the right sub-filter depending on the HLT path name
   theRightHLTSubFilter_ = edm::InputTag();
   std::vector<std::string> filters;
   try { filters = hltConfig_.moduleLabels( theRightHLTTag_.label() ); }
   catch (std::exception ex) { cout << "bad trigger\n"; }

//   for(std::vector<std::string>::iterator filter = filters.begin(); filter!= filters.end(); 
//       ++filter ) {
//     std::cout << "Filter " << filter - filters.begin() << ": " << *filter << std::endl;
//   }

   std::vector<std::string>::const_iterator filter = filters.begin();
   bool foundMatch = false;
   while ((filter != filters.end()) && !foundMatch) {
     std::vector<edm::InputTag>::const_iterator iHLTSubFilter = HLTSubFilters_.begin();
     while ((iHLTSubFilter != HLTSubFilters_.end()) && !foundMatch) {
       if (*filter == iHLTSubFilter->label()) {
	 foundMatch = true;
	 filterName_ = *filter;
	 theRightHLTSubFilter_ = *iHLTSubFilter;
       }
       ++iHLTSubFilter;
     }
     ++filter;
   }

   //sanity check
   if (theRightHLTSubFilter_ == edm::InputTag()) {
     stringstream err;
     err << "Error: none of supplied HLT sub-filters match unprescaled trigger in\n";
     err << "run " << event.run() << ", event " << event.id().event() << ", lumi section ";
     err << event.getLuminosityBlock().luminosityBlock() << std::endl;
     err << "Menu name: " << hltConfig_.tableName() << endl;
     err << "Supplied HLT sub-filters:\n";
     for (std::vector<edm::InputTag>::const_iterator iHLTSubFilter = HLTSubFilters_.begin(); 
	  iHLTSubFilter != HLTSubFilters_.end(); ++iHLTSubFilter) {
       err << *iHLTSubFilter << std::endl;
     }
     err << "Unprescaled trigger: " << theRightHLTTag_ << std::endl;
     edm::LogError("TriggerCandProducer") << err.str();
     throw cms::Exception("GarbageInGarbageOut") << err.str();
   }

   for(int i=0; i != trgEvent->sizeFilters(); ++i) {
     std::string label(trgEvent->filterTag(i).label());
     //std::cout << label << std::endl;
     if( label == theRightHLTSubFilter_.label() ) index = i;
   }

   //-----------------------------------------------------------------------
   if(printIndex_) std::cout << "filter search: " <<  
     theRightHLTTag_.label() << "   index: " << index << std::endl;
   }
   else{

     std::vector<std::string> filters; 
     try { filters = hltConfig_.moduleLabels( theRightHLTTag_.label() ); }
     catch (std::exception ex) { cout << "bad trigger\n"; }
     for(std::vector<std::string>::iterator filter =
	   filters.begin(); filter!= filters.end(); ++filter ) {

       //std::cout << "Filter " << filter - filters.begin() << ": " << *filter << std::endl;

       edm::InputTag testTag(*filter,"", theRightHLTTag_.process() );
       
       int testindex = trgEvent->filterIndex(testTag);
       if ( !(testindex >= trgEvent->sizeFilters()) ) {
	 
	 filterName_ = *filter;
	 filterTag=testTag;
       }
     }

     //std::cout << "Size of filter collection: " << trgEvent->sizeFilters() << std::endl;     
     index = trgEvent->filterIndex( filterTag );
     //std::cout << "Chosen filter index: " << index << std::endl;

     /*for (unsigned int i = 0; i < trgEvent->sizeFilters(); ++i) {
       std::cout << "Filter " << i << ": " << trgEvent->filterTag(i) << std::endl;
     }*/
   }

   if(printIndex_) std::cout << "theRightHLTTag_.label() " <<  
     theRightHLTTag_.label() << "   filter name " <<  
     filterName_ << "  index " << index << "  sizeFilters " <<  
     trgEvent->sizeFilters() << std::endl;

   //-----------------------------------------------------------------
   // find how many relevant
   /*
   edm::InputTag l1testTag(filterName_,"", theRightHLTTag_.process() );
   const int index = trgEvent->filterIndex( l1testTag );
   */
   //-----------------------------------------------------------------


   if( index >= trgEvent->sizeFilters() ) {
     edm::LogInfo("info")<< "******** Following TRIGGER Name Not in Dataset: " <<
       theRightHLTTag_.label();
     event.put(outColRef);
     // event.put(outColPtr);
     return;
   }

   // find how many objects there are
   const trigger::Keys& KEYS(trgEvent->filterKeys(index));
   const size_type nK(KEYS.size());

   //did this event fire the HLT?
   const edm::TriggerNames &trgNames = event.triggerNames(*pTrgResults);
   const unsigned int trgIndex = trgNames.triggerIndex(theRightHLTTag_.label());
   bool firedHLT = (trgIndex < trgNames.size()) && (pTrgResults->accept(trgIndex));

   // Loop over the candidate collection
   // const edm::PtrVector<object>& ptrVect = candHandle->ptrVector();
   const edm::RefToBaseVector<object>& refs = candHandle->refVector();
   unsigned int counter=0;

   for( typename edm::View< object>::const_iterator j = candHandle->begin(); 
	j != candHandle->end(); ++j, ++counter) {

     // Get cut decision for each candidate
     // Did this candidate cause a HLT trigger?
     bool hltTrigger = false;
     for(int ipart = 0; ipart != nK; ++ipart) { 

       const trigger::TriggerObject& TO = TOC[KEYS[ipart]];	
       double dRval = deltaR( j->eta(), j->phi(), 
			      TO.eta(), TO.phi());	
       hltTrigger = dRval < delRMatchingCut_;
       if( hltTrigger ) break;
     }       

     if(hltTrigger && firedHLT) { 
       //std::cout << "Found a matching trigger object for candidate " << counter << ".\n";
       outColRef->push_back( refs[counter] );
       //outColPtr->push_back( ptrVect[counter] );
     }
   } 

   event.put(outColRef);
   // event.put(outColPtr);
}
   










// ---- method called once each job just before starting event loop  ---
template<class object>
void TriggerCandProducer<object>::beginRun(edm::Run& iRun, edm::EventSetup const& iSetup){

  //verify that the process names of all the requested HLT paths are identical
  skipEvent_ = false;
  bool identical = true;
  std::vector<edm::InputTag>::const_iterator iMyHLT = hltTags_.begin();
  edm::InputTag lastTag = *iMyHLT;
  while ((iMyHLT != hltTags_.end()) && identical) {
    if ((*iMyHLT).process() == lastTag.process()) identical = true;
    else identical = false;
    lastTag = *iMyHLT;
    ++iMyHLT;
  }
  if (!identical) skipEvent_ = true;

  //std::cout << "calling init(" << "iRun" << ", " << "iSetup" << ", " << hltTags_[0].process() << ", " << "changed_" << ") in beginRun()" << std::endl;
  if(!hltConfig_.init(iRun,iSetup,hltTags_[0].process(),changed_) ){
    edm::LogError("TriggerCandProducer") << 
      "Error! Can't initialize HLTConfigProvider";
    throw cms::Exception("HLTConfigProvider::init() returned non 0");
  }
  if(printIndex_ && changed_)
    std::cout << "HLT configuration changed !" << std::endl;
}











template<class object>
void TriggerCandProducer<object>::beginJob() {
  filterName_ = "";
}






template<class object>
void TriggerCandProducer<object >::endJob() {
}

